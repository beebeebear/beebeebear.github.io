[{"content":"⚠️上半篇推荐的手把手教学视频可能因为时效性，作者的最后一个视频自动部署方案现在跟着操作会有点（很大）问题，当然，原理其实是一致的，故本篇会尽量详细描述整个自动部署的原理和过程。\n需要说明吗：下文的英文没有一个词是我拽洋文，均是页面上会显示的原文。最烦装〇的人！\n前情提要 书接上回，我们建的第一个公开仓库repository已经成功上线，现在在准备好博文内容之后要达到线上主页更新的目标需要【2】个步骤：\n1.hugo指令hugo -D生成最新的public文件夹；\n2.将public文件夹上传至Github仓库。\n本文的目标是简述及简化上述两个步骤。\n策略之GitHub Action + GitHub Desktop 方案总述：一个是公开仓库后续放public文件，一个是建议私有的仓库包含你的博文源文件，利用GitHub Action自动化生成Public文件并让私有仓库和公开仓库连接，GitHub Desktop本地管理仓库并简化Git指令上传有改动的文件。\n私有仓库建立 小贴士：\n1.仓库名Repository name以见名知意为佳，例如Bear(博客名)HugoBlogSource。\n2.跟我们上一步建立公开仓库唯一区别就是可见选择Private。\nGitHub Action使用 我们的自动化依赖一段代码完成，而第一步是要给权限。（官方说法叫“GitHub 提供一个令牌Token，可用于代表 GitHub Actions 进行身份验证。”）\n设置Token具体操作：打开GitHub，点开个人界面的Settings，往下翻翻到Developer Settings，有一个钥匙图标Personal access tokens (classic)，点进其中的Tokens (classic)，点击Generate new token (classic)，备注Note随便取建议取你能看得懂的，到期时间Expiration选择No expiration（否则你隔个十天八天的还要回来重新给权限），勾选repo和workflow这两部分。\n注意，生成的那串Token只会显示一次，所以可以自己找个另外的文本文档啥的保存记录一下，否则就只能重新设置。\n因为这段Token会被我们写进接下来的自动化代码文件里，所以我们要在这里再进行一个操作，在我们放源代码的仓库（也就是设置成私有的那个仓库）设置一个Secrets（可以理解为给它穿件衣服） （裸奔是不好的） 。\n具体操作：点开我们刚刚创建的私有仓库，点开仓库的Settings，找到Security下的Secrets and variables，点进其中Actions，创建一个New repository secret，Secret那个框里粘贴进去刚刚你复制的那串Token，这里的Name建议不要取奇奇怪怪的名字，最好符合全英文+简洁原则，例如我这里写的是TOKEN。\n下面就到了真正的核心——自动化代码部分，我们回到电脑本地文件夹你存放博客所有文件的位置（像本文就保存在电脑E:\\hugo\\bear），我们新建一个文件夹”.github“，并在”.github“内创建一个子文件夹”workflows“，我们的自动化代码就放在”workflows“文件夹下，创建一个空白文档，粘贴以下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 name: deploy on: push: branches: - main # 或者是你的源代码分支 jobs: deploy: runs-on: ubuntu-24.04 # 之前我用这段代码一直有问题网友说可能是因为这个ubuntu的版本问题，所有跟着网友改成了这个版本 steps: - name: Checkout repository uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 - name: Set up Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; - name: Build and Deploy run: | hugo -D - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.TOKEN }} # 你的个人访问令牌 EXTERNAL_REPOSITORY: beebeebear/beebeebear.github.io # 你的GitHub Pages仓库,即公开的那个仓库 PUBLISH_BRANCH: main # 或者是你的GitHub Pages分支 PUBLISH_DIR: ./public commit_message: ${{ github.event.head_commit.message }} 小贴士：大部分注释都写在上面了，不确定会不会有友友不知道上面说的源代码分支是指什么，点开你的仓库的Settings，General设置下有个Default branch，这里写了你的分支名，本质就是文件夹名，是可以修改的，我习惯用main，也有些人或者创建时默认是master，如果你的显示是master而且你不想改动，那么就把上面这串代码的main改成master。\n自动化代码作者出处：actions-hugo\nGitHub Desktop 喜欢折磨的也可以用Git命令。\n顺带说一下我们新建仓库code页面下create a new repository on the command line里那串命令的意思 （其实是我写都写了不想浪费） ：\n1 2 3 4 5 6 git init //创建空的git文件夹 git remote add origin https://github.com/beebeebear/bearblogsource.git //和远程库建立连接，那串https是对应链接 git branch -M main //当前分支为main分支 git add . //添加所有文件 git commit -m \u0026#34;first commit\u0026#34; //推送，\u0026#34;\u0026#34;内的内容是备注 git push -u origin main //推送到远程的main分支上 不过按照接下来操作我们应该用不上这串命令了……（谁在狂喜？）\n其实仓库创建出来提示页面就有个GitHub Desktop下载按钮，当然也可以点击这个官方链接进行下载：GitHub Desktop\n下载安装之后如果你已经登录了GitHub账号（如果您正在按这篇博客跟着做那么应该是登陆状态）可以直接关联然后登录，这里说一下GitHub代码仓库管理的逻辑其实是这样：线上仓库有文件——克隆（下载）文件到本地——本地文件有更新——确认提交更新后的代码\n到这一步，我们现在以及以后需要管理的就只有私有仓库……在这里插入一小步，创建”.gitignore“文件，意思是在上传的时候自动忽略我们这个文件里写的内容，像public文件我们就不需要上传，以及你如果跟着上半篇我推荐的那个视频走，Hugo.exe文件其实也不用上传，”.gitignore“文件位置写在博客文件夹根目录下（例如我的博客文件夹位置E:\\hugo\\bear，这个文件就写在这里）\n当然也可以不用管”.gitignore“文件，直接梭哈，只是说越简洁在上传的时候能减轻一点网络压力。\n继续以下步骤：GitHub Desktop点进对应私有仓库克隆到本地（我放在了E:\\hugo这个文件夹下，主要是我方便管理，我懒），把我们的源文件扔进去（建议复制不要剪切，既然咱们是新手就要多留心眼，留个原件，这样万一出问题也不至于瞬间回到第一步），这个时候点开GitHub Desktop我们会发现”Changes“那一块多出来很多东西，我们在”Summary“那里写好本次改动的原因（因为是我们自用的博客没有什么规则我比较懒一直在调试就直接打了test）commit to main，然后确认提交push origin，如果失败了大概率是网不行，换个节点。\n稍等片刻，代码生效（学名叫部署）需要点时间，可以点开仓库的Actions查看部署deploy情况。\n到这一步应该就完成整个的自动化操作了，如果没有，请看下一步。\n公开仓库检查 因为如果你按照上篇操作，在公开仓库你应该已经提交了一次代码，这个时候我们去公开仓库检查一下，有可能出现一种情况，除了跟私有仓库有联系的代码（Code页面每一行提交的文件中间有亮着蓝色的部分例如我这边显示是”beebeebear/xxxxxxx(私有仓库名)@xxxxxxxx(一串数字)“）还出现了部分没有联系的，如果你出现了这样的情况，恭喜你，现在打开GitHub Desktop，按照克隆操作把公开仓库拉到本地，然后把文件清空再上传，相当于把公开仓库清空。\n然后GitHub Desktop再重新回到私有仓库，因为自动化代码触发貌似需要代码有变动，所以这里可以新增一个测试博文文件（\\content\\post那里），再再再更新上传，来触发代码生效。\n现在应该就能正常打开博客页面了。\n还有高手？ 其一： 如果咱们的源代码只有一点点变动（例如某篇你发现了错别字），事实上你可以直接在Github上改，这也是为什么要上传源代码的原因……？（并不是）当然，不是很推荐这种做法。\n其二： 心细的友友应该早就察觉，其实新建博文也不一定需要使用hugo命令，第一次它把框架搭好之后我们后续如果只是要新增博文内容，直接拿着以前的文件夹复制粘贴然后修改里面的index.md文件就好了，常用的hugo命令可能是本地调试即hugo server -D。\n其三： 如果搭建中的某一步一直报错，搜索引擎找遍办法也没用，最好的办法就是炸了重来。\n你可能需要的：\n删除仓库的步骤：点进对应仓库Repositories，仓库Settings，划到最下方Danger Zone，Delete this repository。\n其四： 博客搭建不是一劳永逸的，就像上述的自动化代码，半年前还能用结果半年后就要对应修改了……\n但是你的博文内容是最核心也是相对最永恒的，一切皆可抛，保存好post、保存好post、保存好post（重复三遍），总能换个地方重来。（能不用总是迁徙当然更好！）\n","date":"2025-02-15T00:00:00Z","image":"https://beebeebear.github.io/p/%E6%8A%80%E5%B7%A7-%E8%AE%A9%E4%BD%A0%E8%A7%81%E8%AF%86%E8%A7%81%E8%AF%86%E7%9C%9F%E6%AD%A3%E7%9A%84%E6%96%B0%E6%89%8B%E5%B0%8F%E7%99%BD%E7%86%8A%E4%B9%8B%E5%8A%9B%E5%90%A7%E4%B9%8Bhugo-github%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%A8%8D%E5%BE%AE%E5%85%A8%E8%87%AA%E5%8A%A8%E7%AF%87%E7%86%8A/BlogBuild2_hu_cfeab2af737210ea.png","permalink":"https://beebeebear.github.io/p/%E6%8A%80%E5%B7%A7-%E8%AE%A9%E4%BD%A0%E8%A7%81%E8%AF%86%E8%A7%81%E8%AF%86%E7%9C%9F%E6%AD%A3%E7%9A%84%E6%96%B0%E6%89%8B%E5%B0%8F%E7%99%BD%E7%86%8A%E4%B9%8B%E5%8A%9B%E5%90%A7%E4%B9%8Bhugo-github%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%A8%8D%E5%BE%AE%E5%85%A8%E8%87%AA%E5%8A%A8%E7%AF%87%E7%86%8A/","title":"技巧 | 让你见识见识真正的新手小白熊之力吧之Hugo+GitHub搭建静态博客稍微全自动篇熊"},{"content":"熊の博客搭建只能用精彩纷呈形容哇\n本文章适用于：\n1.跟我一样从未搭建过静态博客且（前端）代码知识几乎为0但又不想花过多时间去了解底层代码知识仅有书写博客内容需求的人；\n2.跟我一样对互联网上教程每一步都有很多小问号问gpt结果问号越来越多本质缺少活人手把手纯手工制作教学的人；\n3.我。\n1序 1.1小想法就像四月的天，多变又多变 今天天气很好很适合一局顶级折磨（）\n起因是家中喜迎一位新成员战66，新嘉宾的到来就促使人想再引进点新的什么这种感觉就像剧情推进世界观逐渐展开一样激动人心？！加上我上这个互联网被创的次数太多了我认为有必要每周每月统合大史记让大家陪我一起痛苦而且这样就能为我的卖课Onlyfans社群铺路哦呵呵呵呵。之前一直拖着没去鼓捣博客，要不就？\n别说，一个小小的念头让我折腾了三天，物超所值啊！\n虽然说着有无数专门为小白写的教程，但不可避免搭建博客会涉及到很多专有名词，一旦你对其中某种分类某个名词产生好奇，找着找着很容易找偏并强烈打击你的自信心，像是我很久之前为教程文章中提到的vps困扰我说这是什么你们都这么厉害吗人均电脑大师只有我怎么一点都看不懂算了关电脑睡觉还是回归结绳记事吧……你看，这样其实不好因为我们容易迷失在知识的海洋里！\n我们还是需要一个目标来指引我们到目标地点而不是放任自己环球旅行，脑袋里的小问号起源于“为什么它在这”，让我们回到起点，此时无需问“博客是怎么建成的”，这是一个技术需求，而是去解决一个业务（用户）需求：\n博客是怎么出现的？我们为什么要选择它？\n1.2没有买卖就没有伤害？ 网要笑着玩\n实际上我相信所有技术出现都是基于人类需求，而人类需求不是凭空突然冒出来就像古人不会想哇我们有人工智能的话该多方便幸福呀，技术出现使用——其实互联网技术简称不如说是一堆新兴软件这样我们就不需要面对那么底层的东西——也是会有一个相对符合逻辑循序渐进的过程，所以我默认常见情况如下：\n1.你手上有想要发布的东西（也可以没有，但你有这个念想），比如说日记，旅游攻略，游戏技术……这是你的博客最核心的“内容”，你可能以纸质形式保存，也可能放在了本地电脑上已经有了电子文件形式。 2.你需要把这些东西发布到互联网上——这也是互联网起名之初称为互联网的原因——和网友一起分享，或者说你的需求是更好的留存，总之这离不开互联网。 3.事实上，将软件极尽简化使用操作，用户只需要想好想说的内容，点击发送不涉及任何别的配置（此处配置指系统配置），现在所有平台都是这样做的，但是也面临一个最大的问题，就像你住在别人家，如果你的行为不符合别人心意，别人可以随时赶你出去。而且就算别人没明说暂时还未采取举动，住在别人家，总有种受制于人的感觉。 4.那我能不能自己搭房子？令人欣慰的是，有需求的地方就有市场有市场就有买卖有买卖就有伤害……以下涉及到的方案即便有注明免费的但其实本质上还是符合“买卖需求论”（我自己编的词），下文将会尽量说明我们为什么能“免费”获取一些服务免费搭好博客。 1.3一点点的搭建工具问答 拿起（闭源）工具我就无法拥抱你，放下（开源）工具我就无法保护你\n既然我们决定拿好包袱从盖草房开始新生活，关于怎么建房子接下来我们会听到几乎每篇搭建博客教学都绕不开的词，也就是我们盖房子需要的工具们，你是否和我一样会有很多小问号，我默认答案是“是”，接下来会用并不严谨但尽量让无代码经验的友友们听懂为主的语言进行描述，但凡会一点代码懂一点互联网的都不要听直接跳到实操Step1，当然，欢迎指正：\n1.3.1文本编辑器 这里我们选择的是Markdown文本编辑器——支持的软件有Obisidian（首推）、Typora、Vscode（其实这个写代码的才常用）等\nMarkdown是什么，能吃吗 找到一个不知道算不算官方的但比我说的要官方的参考文档《Markdown中文版参考指南》，比较书面的解释是\nMarkdown 是一种轻量级标记语言，你可以使用它向纯文本文档添加格式元素。\n什么轻量重量，哈哈看不懂 ，但是后半句是重要的，即向纯文本文档添加格式元素。\n为什么选择Markdown，好吃吗 我想大多数已经用上电子设备进行书写的友，如果没有特别需求主动去接触过别的标记语言（如果你从未听过标记语言这个词就适用于本句的“如果”），应该大多聚集于word（只要曾经用过都算）或者一些跟word使用方式大差不差的笔记软件，在文字之外我们还需要关注的一点是样式，例如\n不知道为什么样式没法预览，这里仅写一下markdown添加样式规则，感兴趣的友友在搭建过程中就知道我在说什么了……\n1 2 3 4 **加粗** *倾斜* # 一级标题 ## 二级标题 是的，我们以往只需要鼠标或者手指在对应按键上点一点，你就可以很简单的将对应文字修改成我们需要的样式，但问题来了，我们能获得这样的便利实际上也是因为我们交出了部分的自由。\n因为我们依旧还是住在别人家。\n以word为例，保存的可编辑的文档格式（.doc）（.docx），一旦我们需要留存、分享，如果只是分享给你的朋友且你的朋友也有Office，但网站不认文档文件，所以当你将精心排版的文字直接粘贴到网站上你会发现—wow，什么都没有发生，一切样式归为虚无只剩一大坨文字，这就是纯文本。当然，也有粘贴过后保留了部分样式但是给你打上了一些你可能看不懂的符号，在此不赘述。\n我们现在可以知道的是word将一切的样式给我们封装（打包）好了，但代价是它作为闭源软件，如果你的内容想要迁移到别家非常不灵活（这也是闭源的意义之一），在这个需求下，我们不必去了解历史上这些工具的变迁，让我们直接来到【总结】部分：\n纯文本网站都能识别，但我们需要样式，且这种添加样式的规则最好不受制于平台、版本，再加上一点，能简单好上手，别忘了，对我们来说博客最重要的部分依旧是我们博文内容而不是搭房子的工具，markdown可以满足我们上述的基本要求，所以我们用它。\n题外话：这个时候或许可以来说说markdown定义中的“轻量”，本篇文章的样式即采用markdown规则，一般需求基本上足够用，但如果你想玩一些更精细的，像是字体颜色、插入图片，就要涉及到html等，但我们现在不必如此心急，等到有需求的时候你自然会去弄懂它的。\n支持Markdown的软件，怎么吃 首推Obsidian除了它能识别.md文本以外还有很多有意思的小功能而且支持多平台加上它开源，更重要的是它简洁，嗯……没有广告。其实如果你没有任何要求你甚至可以在文本文档（.txt）里写，虽然无法识别你写的样式规则……\n考虑到篇幅，关于Obsidian的具体使用操作在本文章不会提及，您可以查询Obsidian的官方文档或者观看一些它人的基础操作教程。\nMarkdown基础，慢慢吃 我依旧建议需求导向，大家可以回想一下你以往在笔记记录软件上用的最多的功能是什么，然后再根据自己需求去网上搜索找实现办法。\n常用的几类样式语法：标题、段落、换行、文字格式、引用、列表、代码、分割线、链接、插入图片，都可以在互联网上轻松找到。\n我偏不我就要用我习惯的笔记软件我才不要学劳什子Markdown，我不吃 机器熊模式：好的。\n有需求的地方就会有新技术，即便这一切其实是绕一个大圈，不过人类不就是这样！（我也经常这样）有相关需求的您可以通过搜索引擎带着相关关键词例如“word转markdown插件”去实现您的需求。以及一些笔记软件也支持分享页面，例如Notion。\n1.3.2博客框架生成 先引入一个浅浅的概念，博客最核心的是我们输入的博文内容没错，但技术层面来说，一个博客实际上还包括了html、css、js、图片、视频……一些乱七八糟的，难道都需要我们亲力亲为？\n而且其中一些操作其实是固定的，是重复性工作，这点很重要。\n懒，是生产动力起源，因此，框架诞生了。（我其实称之为人类的亡羊补牢，因为重复性工作很容易出错，直接给你打包好总不会出错了吧！）（其实还是会）\n市面上有很多博客框架，本文综合许多因素选择了Hugo，其实就是友友在用说明一定是好东西我也要用，嘿嘿。\n1.3.3服务器 服务器的作用很广，我们需要服务器做的是储存我们的博客文件数据，本篇文章将依托GitHub解决这个问题。\n注：Github是什么？人话版，主要面向程序员存放代码的地方，但我们可以用它来搭个博客。\n1.3.4域名、ip ip、域名，比较通俗的解释即你需要说明你搭的房子在哪，这样别人才能拿着对应信息来到你家，关于ip稍微深入说一点就会牵扯到很多东西，这并非本文章重点，因此我们只需知道ip是一串数字，而数字对于人类来说并不好记忆，所以人类搞出来了域名，并且开启了一系列关于域名的买卖（下略）。 本文章解决方案将用GitHubPage同时解决ip和域名两个问题，它将给我们分配空间及一个域名。\n1.3.5 小贴士 你发现了吗，服务器和域名这部分如果你有更高的要求，像是你想拥有一个自己的服务器，想要一个喜欢的域名，那么就需要动用……小脑瓜，去三方比价（？）动用钞能力。因为这些实际并不是免费的服务，我们实际上是搭了GitHub提供的便利（？）。\n2一步步开始砌房吧 咦，怎么少了一块？\n一切的（阴暗地爬行） （阴郁地蠕动）（阴森地怪吼）（不分对象攻击）都是从产生这个傲慢想法开始的：\n注册使用三个软件而已你能秒我？\n起初，我决定采用Hugo+GitHub+Vercel（一个自动化把你本地已经搭好的hugo博客框架上传到GitHub的软件我是这样理解的），但没想到惨遭Vercel的拒绝，在一套证明我是人的丝滑验证小连招之后它需要我填写手机号……那我当然是拒绝的，好吧，全自动转半自动，没想到折磨从这里开始……\n在此不详细说明其中曲折而是会一定程度掰碎揉进下列操作流程中，以小作坊加料形式。\n2.1文本编辑器（可选） 因为我已经早早用上Obsidian，所以跳过了这一步。（谁在炫耀？）\n之所以说（可选）是因为你如果没有任何要求，用文本文档写也可以，只是说不太好看也不太方便预览……\n这里放一下Obsidian官网：Obsidian)\n2.2博客框架Hugo 我在这一步受折磨了太久，最后找到了这个真正的手把手教学《Hugo + GitHub免费搭建博客，并实现自动化部署》，作者也给出了对应的文档《Hugo + GitHub免费搭建博客，并实现自动化部署（文档）》\n2.2.1下载 下载Hugo：Hugo\n在这里默认有跟我一样几乎没正经碰过GitHub的小白，温馨提示，点开Tags，点开后排列顺序从新到旧，版本号不是越新越好，大家能懂我意思吧技术日新月异可能你今天鼓捣出来的东西2年后系统就不支持了，因为我这边一路报错吃了太多的苦，为求稳我选了跟参考视频一样的版本v0.131.0，点开Downloads之后你会看见Assets，这里面一般是作者做了适配不同平台系统的，我们只需要选择其中一个即可，这里选择了hugo_extended_v0.131.0_windows_amd64.zip。\n建议把Hugo解压缩到你比较顺手的位置，因为我们后续让它生成框架直接在这个文件夹下执行最方便。\n2.2.2搭建博客框架及参数调试 在该文件夹位置cmd调出命令行（如果有不知道命令行的搜索引擎搜一下），想好你要放入博客框架的文件名，这个文件名跟后续我们展示在网页上的没有关系，喜欢取什么就取什么，但也不要取得太奇怪，建议全英文，无特殊字符（!^.@\u0026amp;这些），我在这里取名为bear，在命令行输入hugo new site bear，就这么简单的一步，它就给我们搭建好了，现在你可以看到多了一个叫做bear的文件夹。\n\\小狗熊（本地版）诞生了！/\n……但其实只是创建了核心的博客文件夹并且塞了些基础配置，我们可以点开看，里面绝大多数子文件夹是空的，也就是说我们当前创建了一个网页但是是空壳，接下来才是重头戏：主题。\n其实感觉有被自身经验及网上说法及翻译误导到，因为按照我以往的经验，主题是锦上添花的东西，但是我误会了一点，我们刚才的那个命令并不包含预设一个主题，它真的是，空的。\n那么就跟着命令行弹出来那一堆12345走，点开它给的下载主题链接，去下载一个主题，这里我极其不推荐之前完全没有鼓捣过博客的友友真就像一堆网上教程说的随便下载一个就好，事实上你把主题下载下来我们还需要进行调试，而且每个主题根据作者的喜好不同配置上肯定会有一些差异，如果你没有任何经验用A主题教学折腾B主题极其有可能疯狂报错即接下来不断的调试预览过程你的页面显示错误，别问，问就是吃过亏了，已删除所有文件重来3次。\n小插曲：其实写主题的作者们为了方便使用者配置，一般会特别放一个exampleSite文件夹，相当于新手包，复制粘贴咔咔一顿就好了，但我最开始下载的主题，没有exampleSite文件夹……对于没法触类旁通的小狗熊来说真是令人摸不着头脑。\n这里我跟着这个贴心小白教程下载了Stack主题，接下来参数调试过程跟着原视频做，加上小熊本阶段也对这部分调试一知半解也还在汲取知识中，就不重复书写了，等到熊能举一反三的时候再拿喜欢的主题来说吧！\n如果到这里你也一路顺利，其实已经成功了80%，歇口气歇口气。\n2.2.3Hugo常用指令 创建新文章：例如我们要创建一篇叫weekly的文章，在你的博客文件夹下，本文章中即指bear，启动命令行，输入命令hugo new content post/weekly/index.md，一路点开\\bear\\content\\post，事实上我们所有的博文都会放在这（如果你跟着教程一路走来可能我这句话已经说晚了），因此如果后续万一出了什么问题，一切皆可抛，唯一需要记得带上你的post文件夹走。 2.3村里通网了之GitHub 2.3.1Git Git原本用法包含了我们实际用法，我们此处只需知道我们需要Git这个中介将我们的博客（本地版）上传到GitHub，这样别人就可以通过链接访问到我们的博客。\nGit官网下载：Git\n2.3.2GitHub Git官网：GitHub\n小贴士：注册账号推荐使用邮箱，不要用国内邮箱（Outlook最好也不要），试手拿着玩的可以用临时邮箱。账号名需要注意，用这个方案我们获取的域名与你的账号名强联系，例如本博客GitHub账号名就是beebeebear，所以取账号名的时候可以稍微留心一下。\n账号建立后跟着教程走建仓库repository，建立公开仓库后续放public文件，实际上public文件就是我们Hugo发功之后最终结果，不涉及源代码，如果你跟我有一样的好奇心，我们点开其中任意文件夹找到index.html这样的文件双击点开，你会发现它实际上已经帮我们生成了一个个独立的页面。\n好了，截至这里，半自动化已完成，流程即：准备好博文内容——hugo指令创建新博文文件夹及基础文件index.md——复制粘贴修改index.md里的内容——hugo指令hugo -D生成public文件（记得把旧的删掉）——Git指令将public文件上传仓库………………\n……好麻烦啊！\n接下来探索自动化部署，把半自动化升级到全自动。\nTo Be Continued\n","date":"2025-02-10T22:58:47+08:00","image":"https://beebeebear.github.io/p/%E6%8A%80%E5%B7%A7-%E8%AE%A9%E4%BD%A0%E8%A7%81%E8%AF%86%E8%A7%81%E8%AF%86%E7%9C%9F%E6%AD%A3%E7%9A%84%E6%96%B0%E6%89%8B%E5%B0%8F%E7%99%BD%E7%86%8A%E4%B9%8B%E5%8A%9B%E5%90%A7%E4%B9%8Bhugo-github%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%8D%8A%E8%87%AA%E5%8A%A8%E7%AF%87%E7%86%8A/BlogBuild1_hu_a9dcce61e8abf4b2.png","permalink":"https://beebeebear.github.io/p/%E6%8A%80%E5%B7%A7-%E8%AE%A9%E4%BD%A0%E8%A7%81%E8%AF%86%E8%A7%81%E8%AF%86%E7%9C%9F%E6%AD%A3%E7%9A%84%E6%96%B0%E6%89%8B%E5%B0%8F%E7%99%BD%E7%86%8A%E4%B9%8B%E5%8A%9B%E5%90%A7%E4%B9%8Bhugo-github%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%8D%8A%E8%87%AA%E5%8A%A8%E7%AF%87%E7%86%8A/","title":"技巧 | 让你见识见识真正的新手小白熊之力吧之Hugo+GitHub搭建静态博客半自动篇熊"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://beebeebear.github.io/p/%E6%95%99%E5%AD%A6%E6%B5%8B%E8%AF%95%E7%94%A8/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://beebeebear.github.io/p/%E6%95%99%E5%AD%A6%E6%B5%8B%E8%AF%95%E7%94%A8/","title":"教学（测试用）"}]