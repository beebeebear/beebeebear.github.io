<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>连载 on 小狗熊</title>
        <link>https://beebeebear.github.io/tags/%E8%BF%9E%E8%BD%BD/</link>
        <description>Recent content in 连载 on 小狗熊</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>BeeBear</copyright>
        <lastBuildDate>Wed, 11 Jun 2025 00:00:07 +0800</lastBuildDate><atom:link href="https://beebeebear.github.io/tags/%E8%BF%9E%E8%BD%BD/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>技巧 | 从新电脑开始的软件推荐熊</title>
        <link>https://beebeebear.github.io/p/softwaremaybeneed/</link>
        <pubDate>Wed, 11 Jun 2025 00:00:07 +0800</pubDate>
        
        <guid>https://beebeebear.github.io/p/softwaremaybeneed/</guid>
        <description>&lt;img src="https://beebeebear.github.io/p/softwaremaybeneed/SoftwareMaybeNeed.png" alt="Featured image of post 技巧 | 从新电脑开始的软件推荐熊" /&gt;&lt;h2 id=&#34;windows系统&#34;&gt;Windows系统
&lt;/h2&gt;&lt;h3 id=&#34;新笔电设置最简洁版&#34;&gt;新笔电设置最简洁版
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;品牌：华硕战66，轻薄本&lt;/li&gt;
&lt;li&gt;1.看看戳戳敲敲，确认物理上电脑没问题。&lt;/li&gt;
&lt;li&gt;2.开机，现在首次开机都基本上会自动开启傻瓜式引导带着你一步步操作，其实我不是很喜欢，总有种被操控的感觉……&lt;/li&gt;
&lt;li&gt;3.磁盘分区。现在分区超级简单？！找到磁盘管理，压缩卷就是拆分的意思，1G=1024MB，提前换算好，拆分后该磁盘空间会处于未分配状态，再执行新建卷操作。吃了一系列亏之后我的习惯是系统盘C盘留200G——其实200G都有点多了，剩下的仅分出一个相对灵活的盘。因为分多个盘会面临一个尴尬的问题，如果是存放大型文件，可能会导致某个盘正好缺一点容量才能放下，就很，尴尬&amp;hellip;&amp;hellip;&lt;/li&gt;
&lt;li&gt;4.广告推送关闭。清理一下系统乱七八糟的自带广告，不知道是国产这样还是全世界都这样，华硕自带的广告倒是挺好关的都在系统设置里能找到而且不需要多余的权限操作？没有广告心情好了，顺带换个桌面背景。&lt;/li&gt;
&lt;li&gt;5.现在国产？电脑都会送一个Office正版，所谓的激活其实只需要你在这台电脑上登录，就会自动绑定了，有种领新手礼包的感觉。于是我现在账号既有2016版又有2021版了，好像在集章&amp;hellip;&amp;hellip;&lt;/li&gt;
&lt;li&gt;6.到这里就基本结束了，除了自己常用软件外，以下根据自己需求调节：&lt;/li&gt;
&lt;li&gt;6.1系统的安全设置。下载的常用软件总是弹危险弹窗所以习惯性关闭，危不危险我不比你清楚？不能判别自己安装软件是否安全的，保持系统默认的杀毒软件开启即可，也不用下载别的什么36〇，系统自带的已够用，除非你很爱下载不明软件点击不明网站。&lt;/li&gt;
&lt;li&gt;6.2字体。无论是正式文件需要用到的字体还是喜欢的开源字体都可以尽早安装，.ttf格式的字体下载之后直接双击即可安装到系统盘。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;辅助功能-窗口置顶固定&#34;&gt;辅助功能-窗口置顶固定
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;需求：事实上一些大型软件会自带这个功能，并且常以📌图钉标签出现，一些视频软件中的画中画模式实现的效果和此类似。该功能能实现此窗口始终保持在所有窗口的的前面，而无需反复切换查看。&lt;/li&gt;
&lt;li&gt;实现：Microsoft PowerToys，微软推出的工具包，据它们自己说这个工具包是开源的。&lt;/li&gt;
&lt;li&gt;官方地址：Microsoft Store下载/Github的PowerToys页面。&lt;/li&gt;
&lt;li&gt;使用：默认快捷键Ctrl+Win+T，可修改，还有一些基础设定可在软件内修改。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>技巧 | 小狗熊学大编程继续行进中熊</title>
        <link>https://beebeebear.github.io/p/programwhatweshoulddo/</link>
        <pubDate>Sat, 22 Feb 2025 00:00:00 +0000</pubDate>
        
        <guid>https://beebeebear.github.io/p/programwhatweshoulddo/</guid>
        <description>&lt;img src="https://beebeebear.github.io/p/programwhatweshoulddo/Program.png" alt="Featured image of post 技巧 | 小狗熊学大编程继续行进中熊" /&gt;&lt;p&gt;⚠考虑到这个其实可能是敏感话题，严肃些说，全文归根结底只是小编熊在一堆混乱的信息流中摸索的经验之谈（并且连载中随时可能推翻重写），有不恰当之处请友好讨论，没有谁出生就是专家，但是有熊出生就是暴君，小编会斩立决不友好的人，感谢配合。&lt;/p&gt;
&lt;h2 id=&#34;1会不会有点意识流了&#34;&gt;1会不会有点意识流了
&lt;/h2&gt;&lt;p&gt;在（主动）误入Obsidian的坑后，自然而然熟悉了一些markdown语法，并且开始鼓捣（抄）一些插件——毕竟Obsidian本质就是洋娃娃换装游戏？！你需要给只有骨骼的小人安好肉和皮并且给小人穿上好看舒适的衣服&lt;font size=&#34;1&#34;&gt;（这换装游戏正经吗）&lt;/font&gt;——鼓捣鼓捣着，Obsidian作为我的半自动智能管家稍微把之前一团乱麻的生活变成了半团乱麻，但依旧太乱了，其实我们都知道整理乱桌子不如再找一张新桌子开始新的生活，呃听上去有点掩耳盗铃，但如果人性不如此吃着碗里的看着锅里的人类社会经济要怎么运行起来呢，意思是我看中了网友的建站教程。&lt;/p&gt;
&lt;p&gt;那个时候一切知识都是新奇的，意思是一点都看不懂，主机是什么，vps是什么，web是什么，css是什么三件套是什么，你们为什么经常这种“你懂的”语气，我要从哪来又要到哪去？&lt;/p&gt;
&lt;p&gt;每一个知识点都会引出一串新的名词，在知识的大海里我感到的不是捉到一个个美丽贝壳的惊喜，而是无尽的焦虑。&lt;/p&gt;
&lt;p&gt;一气之下我决定——不如就彻底来直面深渊，不是它死就是我亡。（也没这么热血）&lt;/p&gt;
&lt;p&gt;好吧归根结底只是我的大脑实在无法理解一个个无序的片段。&lt;/p&gt;
&lt;p&gt;还有一点是程序员是公认的靠技术赚钱的行业而且不像其它技术多数需要线下有师傅带甚至需要一些家族血缘关系，至于前景，瘦死的骆驼比马大总比〇〇业好——对，我缺钱。&lt;/p&gt;
&lt;p&gt;初心一开始只是为了建站吧……？但是现在这一刻起初心变成了，转行。&lt;/p&gt;
&lt;h2 id=&#34;2互联网怎么不互联&#34;&gt;2互联网怎么不互联
&lt;/h2&gt;&lt;p&gt;都说互联网好，确实是好的，但如今“日记”着实有点多，大家本质是在记自己的日记，对于我个外人来说很难看懂，免费的还真就是最贵的，但是我也没钱找专人辅导，就导致在这个过程中花了不少探索的时间，只是为了找条入门学习路线。&lt;/p&gt;
&lt;p&gt;毕竟，真的，门也太多了。&lt;/p&gt;
&lt;p&gt;c++、java、python……看着就头晕眼花的语言，找着找着又听网友说什么操作系统计算机网络原理软件工程是必修课，又说现在你只学语言和这些可不够现在都是全栈工程师了什么前后端对了对了再加上人工智能可不能不学呀不然你就要被时代抛弃啦，然后我简单算了算，再过20年我应该能将将入门，敬请期待吧。&lt;/p&gt;
&lt;p&gt;……我说等一下。&lt;/p&gt;
&lt;p&gt;不对吧，这是入门还是入坟呢。这句话虽然常被人挂在嘴上但多数是调侃，你们来真的？&lt;/p&gt;
&lt;p&gt;于是我想，是不是方向错了。方向比努力更重要就像我鼓捣了3天的Git命令最后发现在Github Desktop上就鼠标点点的事。（希望你会听懂这个有点残酷的黑色幽默小笑话）&lt;/p&gt;
&lt;p&gt;我不需要那么精细的学习，就像我落笔写字的时候也没有说我必须通读全世界经典并且融会贯通才有写字的资格吧。如果真是这样，咱们臭码字的地位也不会——（下略）&lt;/p&gt;
&lt;p&gt;我尽量不带恶意地想，或许是我搞错了工具书和工具书的区别，一个是可以跟着操作的，一个是类似于字典其实更适合查漏补缺的。&lt;/p&gt;
&lt;p&gt;后来我再一想，其实这些问题都可以通过外包解决，也就是报班，市面上的编程课还是比较成熟的，指对科班有科班的卖课，对转码有转码的卖课，在速成就业上还是有套方法以及一般还是会和一些公司招聘有资源交换，可能甄别也不太好甄别的是报班之后这个团队靠不靠谱不仅指带课的老师还有后续的运营人员，但自己探索也会遇到无数坑，人生就这样！如果你已经报班了，那就听机构的，毕竟钱已经花出去了，相信钱的选择。&lt;/p&gt;
&lt;p&gt;但是我也说了我没钱，这也是问题所在。&lt;del&gt;（希望看到这句话的金主妈妈做出一些重要的决定比如说资助我领养我〇养我之类的）&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;在找了一堆所谓的入门素材后我发现脑子越来越乱，尤其是不同的博主都有自己的见解以及卖课的课程，以及我想到一个问题，我毕竟不是科班的，要不我们来看看科班学了些什么参考一下，于是在浏览了数份国内外的大学课程设置之后我先关闭了国内的。&lt;/p&gt;
&lt;p&gt;常见的课程安排总是数学如影随形，怎么说，有点违背人性了。（只是因为对数学的恐惧）&lt;/p&gt;
&lt;p&gt;这可能也是为什么字典型的编程工具书会喜欢把数学摆在第一课，因为确实现状也有一定的影响。&lt;/p&gt;
&lt;p&gt;不过数学会是必要的，但我觉得不是现在。&lt;/p&gt;
&lt;p&gt;不过在了解科班学习路径的途中我也了解到一个其实被我忽略的信息，每个专业在这件事上大同小异，即工作前如果要证明自己的专业度，通常办法是，考证书或是打比赛或是自己闯出个名堂。比较遗憾的是比较“亲民”的赛事一般只针对在校学生，毕竟不设置这个规则的话一些富有经验的老手应该会呈碾压之势，同时也说明黑客松也不会是我的首选除非有人想带我但到现在了暂时这群人还没出现 &lt;del&gt;（暗示？！）&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;相对可以实施的可能也就看看通用证书，没想到兜兜转转又回到考试，这大考小考的一生……&lt;/p&gt;
&lt;p&gt;会有人说要不要为了转行去考研408，这个想法不能说危险吧但。&lt;/p&gt;
&lt;p&gt;人生苦短啊。人可以保持激情但是别疯狂，疯狂是不好的。当然，这是针对我自身情况得出的结论，不同情况需另外讨论。&lt;/p&gt;
&lt;p&gt;说回通用证书，别说，还真有，就像工作软件计算机二级Office一样，计算机这边有个【计算机技术与软件专业技术资格（水平）考试】，为什么拿计算机二级举例呢，因为这玩意相当于一个初级考核，证明你确实达到了入门水准，至于你真实水平，是不能仅靠这一个证据来证明的。毕竟人类实在太多了行业竞争大。&lt;/p&gt;
&lt;p&gt;按常见说法即“没有含金量”。&lt;/p&gt;
&lt;p&gt;不过我不是很在乎什么含金量，&lt;del&gt;真正的含金量是ip吧&lt;/del&gt;，这也是我做任何事的决策逻辑，即回过头来看我们需要什么，我需要一个能相对缩短了解计算机这个科目体系花费的时间并且得到一个转行入门的证明。&lt;/p&gt;
&lt;p&gt;当然，从事后看来这依旧不是最佳策略，因为信息不够的原因导致我在稍微算是深入了解软考之后发现它其实更注重理论，所以它能补齐一些我理论欠缺的部分，但是实战部分它是缺少的，而编程实战是很重要的一环，重要到甚至理论后补也没关系（但是前情提要也说了我脑子没办法跳读），这也是计算机这行的卖课为什么可行，而一说到编程大家就说别问库库学语言跟着做项目学完就就业，从某种角度来说确实是的。&lt;/p&gt;
&lt;p&gt;那么接下来我会以优化过后的方式来梳理一个此前没有接触过计算机行业的人怎样相对快速去了解计算机这个专业领域。&lt;/p&gt;
&lt;p&gt;当然，仅供参考。&lt;/p&gt;
&lt;h2 id=&#34;3半路出家的行动策略v10&#34;&gt;3半路出家的行动策略v1.0
&lt;/h2&gt;&lt;h3 id=&#34;31双线并行量力而行&#34;&gt;3.1双线并行，量力而行
&lt;/h3&gt;&lt;p&gt;在上文中熊说到，一边是理论一边是实战，理论部分我依旧还是会以【软考】为例，来说一下我体感相对比较舒适的学习顺序以及我对每部分的个人理解，实战部分简言之即学语言，一般会分成两个路线，【前端】和【后端】，现在常说的一个人当三个人使的全栈意思就是前端+后端 &lt;del&gt;（哦可能还包括产品经理客户经理之类的一个人就是一个组织）&lt;/del&gt; ，人话简单来说前端本质是展示数据的后端是维护数据的。&lt;/p&gt;
&lt;p&gt;说到这里会不会有友友已经晕过去了，那么让我们在这里做个小总结：&lt;/p&gt;
&lt;p&gt;我们需要解决2件事，即理论和实战，理论部分将参考【软考】大纲，实战部分将分为【前端】和【后端】。&lt;/p&gt;
&lt;p&gt;从打工角度以及时间规划角度，实战的优先级高高高于理论，双线并行当然是最佳，但如果无法同时顾及就先学会抄代码，当然抄代码这里也需要解决1个问题，关于【前端】和【后端】的抉择。&lt;/p&gt;
&lt;p&gt;大致参考的（编程领域真的很多男讲师，这对我这个小众爱好者来说感觉是非常遗憾的，欢迎向熊推荐女讲师非第一性讲师）（需要注意的可能是每个讲师有自己的习惯，尤其是现在喜欢一整套一整套课的卖，因此如果跟了多个讲师，知识点可能并不是完全的）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1Bg4y1b7Wx/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java从零基础到做项目（女讲师赵珊珊，在bilibili有自己的账号叫“珊珊不爱唱歌”）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1MJ411v7tJ/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JavaSE阶段回顾总结（男讲师，课程可能稍微有点旧了是2020年的但知识点应该没啥大变化）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以及一些官方文档，官方文档对我来说更像字典很适合自查，但不太适合刚接触的适合就看，就像你会教人中文的时候让伊背字典吗那你得是多恨伊呀，字典是工具书不是教辅捏。&lt;/p&gt;
&lt;h3 id=&#34;32ctrlcv工程师连载中&#34;&gt;3.2CtrlCV工程师（连载中）
&lt;/h3&gt;&lt;h4 id=&#34;321前端&#34;&gt;3.2.1前端
&lt;/h4&gt;&lt;p&gt;前端的路径相对比较统一而且没什么争论，HTML+CSS+JS，而代码之外更注重的其实是美学的部分。前端和后端能够“分离”其实是人为的，因为理论上来说一个人不应该做那么多事 &lt;del&gt;（不是从人文关怀角度而更多其实是从规避一个员工掌握太多公司信息从而公司被拿捏的角度）&lt;/del&gt; ……&lt;/p&gt;
&lt;h4 id=&#34;322后端&#34;&gt;3.2.2后端
&lt;/h4&gt;&lt;p&gt;现在&lt;strong&gt;国内&lt;/strong&gt;市面上最火爆的毋庸置疑是JAVA，它有一套相对成熟的路线，但缺点是人真的太多了，多到你会JAVA不是优势你不会JAVA可能会是劣势，加上人一多想法就多，于是你就要学越来越多的东西……此外说得比较多的肯定是C++，Python，以及新兴又讨论得比较多的语言GO，关于语言排名可以带着相关关键词在搜索引擎上查找，&lt;strong&gt;关于语言的好与坏其实语言诞生之初都有其相对专攻的用途&lt;/strong&gt;，如果是从打工角度其实不如打开招聘软件做参考，这也是为什么不会推荐新兴但没有人用的语言，因 为 没 有 人 用。&lt;/p&gt;
&lt;p&gt;搜索引擎一搜能看到有不少做语言市场占比率排名变化的网站，像是&lt;a class=&#34;link&#34; href=&#34;https://www.tiobe.com/tiobe-index/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TIOBE指数&lt;/a&gt;，对应中文版（我并不知道这是否是官方的）&lt;a class=&#34;link&#34; href=&#34;https://tiobe.org.cn/tiobe-index/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TIOBE指数中文&lt;/a&gt;，这些趋势也可以作为你起初选择一门语言的参考，以及这些分析语言使用趋势的网站也很爱进一步分析语言使用人数变化背后的原因，像是C#的使用背后很大原因是……游戏市场。&lt;/p&gt;
&lt;h5 id=&#34;java&#34;&gt;JAVA
&lt;/h5&gt;&lt;p&gt;阴差阳错之下我开始鼓捣JAVA，结合后知后觉的开悟浅说一下整个JAVA的学习其实就两部分，一个是基础语法一个是框架（即模板），中间有很长一段时间都会在框架上挣扎因为JAVA这个语言吧，人类需求越来越大框架也在不断推出新品，像近年常提到的框架是【springboot】。&lt;/p&gt;
&lt;p&gt;所以通用&lt;strong&gt;路线&lt;/strong&gt;其实是：&lt;/p&gt;
&lt;p&gt;第一部分：【JAVA基础（也会有课程名叫JAVASE）】→【MYSQL】（放相对永久数据的地方）&lt;/p&gt;
&lt;p&gt;到这里最基础的部分结束，迎来框架部分，第二部分：像这里其实可以灵活调节，因为从产品诞生的顺序来说是【JavaWeb】→【ssm（Spring框架、SpringMVC框架、MyBatis框架）】→【springboot】以及配合【经典项目实战（例如常被调侃的外卖系统、图书系统）】，但实际上JavaWeb里的一些东西在ssm出现后被“淘汰”了，ssm已经被springboot“淘汰”了（用引号是因为有些不是真的淘汰而是精简了），也有人可以接受【springboot】的逻辑所以可以倒着学即【javaweb的层（因为这是最底层的概念还是需要先了解）】→【springboot】→【ssm】→【JavaWeb】，因为逻辑上来说只要你会用springboot就可以开始做项目了，但如果没有办法适应可能还是需要按照上面说的顺序。再继续同样属于第二部分但有些课程会放在第一部分但其实要实际开发一段时间才懂在说什么的【设计模式】【多线程】【并发编程】【数据结构】【JVM】。&lt;/p&gt;
&lt;p&gt;接下来的是太过常见的&lt;strong&gt;思维导图&lt;/strong&gt;，思维导图比路线要详细很多但更多是查漏补缺用，不建议开局就一大片思维导图，思维导图实际上是我们有了基本认识之后回顾用的东西而不是按照思维导图进行学习安排，而且每个讲师习惯不一样如果依赖太详细的思维导图可能反而会导致知识点零碎，以下是我Ctrl C+V过来的一个仅供参考思维导图，并在其基础上添加了一些备注：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JAVASE
&lt;ul&gt;
&lt;li&gt;计算机基础 // 不算必要因此有些讲师不会说
&lt;ul&gt;
&lt;li&gt;简单的Dos命令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;笔记梳理（博客） // 行为习惯比较推荐博客但不强制
&lt;ul&gt;
&lt;li&gt;Markdown语法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JAVA初识
&lt;ul&gt;
&lt;li&gt;JAVA的诞生，版本SE ME EE&lt;/li&gt;
&lt;li&gt;JDK 工具包&lt;/li&gt;
&lt;li&gt;JRE 搭建环境&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JAVA基础
&lt;ul&gt;
&lt;li&gt;注释&lt;/li&gt;
&lt;li&gt;关键字&lt;/li&gt;
&lt;li&gt;数据类型&lt;/li&gt;
&lt;li&gt;类型转换&lt;/li&gt;
&lt;li&gt;变量常量&lt;/li&gt;
&lt;li&gt;运算符&lt;/li&gt;
&lt;li&gt;包&lt;/li&gt;
&lt;li&gt;JavaDoc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;流程控制
&lt;ul&gt;
&lt;li&gt;Scanner&lt;/li&gt;
&lt;li&gt;顺序结构&lt;/li&gt;
&lt;li&gt;选择结构&lt;/li&gt;
&lt;li&gt;循环结构&lt;/li&gt;
&lt;li&gt;break &amp;amp; continue &amp;amp; return&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;方法
&lt;ul&gt;
&lt;li&gt;定义：修饰符 返回值 方法名(参数名)(return 返回值)&lt;/li&gt;
&lt;li&gt;调用&lt;/li&gt;
&lt;li&gt;重载&lt;/li&gt;
&lt;li&gt;命令行传参&lt;/li&gt;
&lt;li&gt;可变长参数&lt;/li&gt;
&lt;li&gt;递归&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;li&gt;面向对象
&lt;ul&gt;
&lt;li&gt;类与对象&lt;/li&gt;
&lt;li&gt;构造方法&lt;/li&gt;
&lt;li&gt;封装&lt;/li&gt;
&lt;li&gt;继承&lt;/li&gt;
&lt;li&gt;多态&lt;/li&gt;
&lt;li&gt;抽象类&lt;/li&gt;
&lt;li&gt;接口&lt;/li&gt;
&lt;li&gt;内部类
// 进行到这一步实际上最最最基础的部分已经结束，但仅进行到这一步如何运用手上的代码大概率还是懵的
// 但面向对象已经结束的前提下实际上已经可以完成一些很简短的项目，可以用来巩固这一部分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;异常&lt;/li&gt;
&lt;li&gt;常用类
&lt;ul&gt;
&lt;li&gt;Object类&lt;/li&gt;
&lt;li&gt;Math类&lt;/li&gt;
&lt;li&gt;Random类&lt;/li&gt;
&lt;li&gt;File类&lt;/li&gt;
&lt;li&gt;包装类&lt;/li&gt;
&lt;li&gt;Date类&lt;/li&gt;
&lt;li&gt;String类&lt;/li&gt;
&lt;li&gt;StringBuffer&lt;/li&gt;
&lt;li&gt;StringBuilder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;集合框架
&lt;ul&gt;
&lt;li&gt;Colletion&lt;/li&gt;
&lt;li&gt;Map&lt;/li&gt;
&lt;li&gt;Collections工具类&lt;/li&gt;
&lt;li&gt;泛型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IO
&lt;ul&gt;
&lt;li&gt;字节流&lt;/li&gt;
&lt;li&gt;字符流&lt;/li&gt;
&lt;li&gt;节点流&lt;/li&gt;
&lt;li&gt;处理流
// 上面这些即便听完也不知道该怎么用也很正常……？因为现在拿到的都是工具，没有需求的前提下拿着锤子也不知道怎么用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GUI编程 // 这里会插入一个GUI主要是引入了“监听”这个概念，在后期阶段用得上，加上这个组件（？）吧现在已经（基本）不用了，所以很多讲师可能拿来举的例子会不一样&lt;/li&gt;
&lt;li&gt;网络编程
&lt;ul&gt;
&lt;li&gt;IP&lt;/li&gt;
&lt;li&gt;端口&lt;/li&gt;
&lt;li&gt;Socket编程&lt;/li&gt;
&lt;li&gt;TCP&lt;/li&gt;
&lt;li&gt;UDP&lt;/li&gt;
&lt;li&gt;Tomcat&lt;/li&gt;
&lt;li&gt;聊天通信&lt;/li&gt;
&lt;li&gt;文件上传&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多线程（了解） // 有些网友也会认为多线程不应该放在JAVASE阶段，具体能否接受实际上听两节课就知道，听不懂就先往下继续等到需要多线程的时候再回来
&lt;ul&gt;
&lt;li&gt;进程和线程&lt;/li&gt;
&lt;li&gt;run() start()&lt;/li&gt;
&lt;li&gt;线程创建方式&lt;/li&gt;
&lt;li&gt;静态代理&lt;/li&gt;
&lt;li&gt;Lambda表达式&lt;/li&gt;
&lt;li&gt;线程的状态&lt;/li&gt;
&lt;li&gt;线程同步&lt;/li&gt;
&lt;li&gt;线程通信&lt;/li&gt;
&lt;li&gt;线程池&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注解和反射&lt;/li&gt;
&lt;li&gt;JUC编程&lt;/li&gt;
&lt;li&gt;JVM（了解）&lt;/li&gt;
&lt;li&gt;设计模式（了解） // 但如果是有一定理论基础的实际上设计模式上应该有了些浅浅了解&lt;/li&gt;
&lt;li&gt;XML（了解）&lt;/li&gt;
&lt;li&gt;数据结构和算法（了解）&lt;/li&gt;
&lt;li&gt;正则表达式（了解）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据库
&lt;ul&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;JDBC （JAVA操作MySQL）&lt;/li&gt;
&lt;li&gt;UML类图（了解）&lt;/li&gt;
&lt;li&gt;数据库设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;前端 // 可能需要说明的是前端放在这里只是这个思维导图认为相对合适
&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JS&lt;/li&gt;
&lt;li&gt;jQurery&lt;/li&gt;
&lt;li&gt;Layui / BootStrap&lt;/li&gt;
&lt;li&gt;Vue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JAVAWeb
&lt;ul&gt;
&lt;li&gt;Tomcat&lt;/li&gt;
&lt;li&gt;Http&lt;/li&gt;
&lt;li&gt;Maven&lt;/li&gt;
&lt;li&gt;Servlet&lt;/li&gt;
&lt;li&gt;Session + Cookie&lt;/li&gt;
&lt;li&gt;JSP&lt;/li&gt;
&lt;li&gt;MVC三层架构&lt;/li&gt;
&lt;li&gt;JSTL + EL表达式&lt;/li&gt;
&lt;li&gt;过滤器&lt;/li&gt;
&lt;li&gt;监听器&lt;/li&gt;
&lt;li&gt;文件上传&lt;/li&gt;
&lt;li&gt;邮件收发&lt;/li&gt;
&lt;li&gt;富文本编辑器（了解）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SSM框架
&lt;ul&gt;
&lt;li&gt;Git（工具）&lt;/li&gt;
&lt;li&gt;MyBatis&lt;/li&gt;
&lt;li&gt;Spring&lt;/li&gt;
&lt;li&gt;SpringMVC&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux
&lt;ul&gt;
&lt;li&gt;Linux基础&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;Nginx&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SpringBoot
&lt;ul&gt;
&lt;li&gt;基础&lt;/li&gt;
&lt;li&gt;配置及原理&lt;/li&gt;
&lt;li&gt;持久层操作&lt;/li&gt;
&lt;li&gt;Web开发&lt;/li&gt;
&lt;li&gt;缓存&lt;/li&gt;
&lt;li&gt;消息&lt;/li&gt;
&lt;li&gt;检索&lt;/li&gt;
&lt;li&gt;任务&lt;/li&gt;
&lt;li&gt;安全&lt;/li&gt;
&lt;li&gt;Dubbo + Zookeeper分布式开发&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SpringCloud
&lt;ul&gt;
&lt;li&gt;微服务及微服务架构&lt;/li&gt;
&lt;li&gt;SpingCloud&lt;/li&gt;
&lt;li&gt;Eureka注册服务与发现&lt;/li&gt;
&lt;li&gt;Feign + Ribbon负载均衡&lt;/li&gt;
&lt;li&gt;Hystrix熔断机制&lt;/li&gt;
&lt;li&gt;Zuul路由网关&lt;/li&gt;
&lt;li&gt;SpingCloud Config配置中心&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hadoop
&lt;ul&gt;
&lt;li&gt;大数据时代&lt;/li&gt;
&lt;li&gt;基础&lt;/li&gt;
&lt;li&gt;环境搭建&lt;/li&gt;
&lt;li&gt;HDFS&lt;/li&gt;
&lt;li&gt;MapReduce&lt;/li&gt;
&lt;li&gt;Yarn&lt;/li&gt;
&lt;li&gt;Hive&lt;/li&gt;
&lt;li&gt;Hbase&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;cc&#34;&gt;C/C++
&lt;/h5&gt;&lt;p&gt;C/C++和其它常说的语言不太一样的一点是其它语言是造车的轮子，而C/C++是造轮子的。&lt;/p&gt;
&lt;p&gt;C和C#和C++的关系有点像……家族关系。由于熊还没正式从这里起步因此防止误导只谈这么一点。&lt;/p&gt;
&lt;p&gt;通用&lt;strong&gt;路线&lt;/strong&gt;：&lt;/p&gt;
&lt;h5 id=&#34;golang&#34;&gt;Golang
&lt;/h5&gt;&lt;p&gt;Golang的通用&lt;strong&gt;路线&lt;/strong&gt;网友惊呼很简洁，不过我觉得其实是因为JAVA太……（欲言又止），逻辑也是从基础到框架，而数据库、前端那些是互通的也是几乎必备的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础语法&lt;/li&gt;
&lt;li&gt;主流Web框架（Gin Beego Iris）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;33理论基础超基础版&#34;&gt;3.3理论基础超基础版
&lt;/h3&gt;&lt;h4 id=&#34;331-基本信息&#34;&gt;3.3.1 基本信息
&lt;/h4&gt;&lt;p&gt;软考，全称是【计算机技术与软件专业技术资格（水平）考试】，需要说明的是，就和淘宝商品存在很多你看不懂的套餐一样，这个证书分了初、中、高三大类，然后其中又细分了数小类，加总起来将近30个小类，是针对不同需要的人群来的其中也包括其实并不怎么涉及计算机软件的部分，按我们的需求相对符合的是中级的【软件设计师】，对应更高一级的是高级的【系统架构设计师】，高级与中级的最大区别其实是多出一个写800字论文环节，并且这个论文可以说八股但没有接触过任何项目的可能又要花很多时间去接受那套体系……&lt;/p&gt;
&lt;p&gt;总之如果你和小编熊情况类似，即计算机水平只是打字玩电脑不涉及到多少计算机专业知识，时间比较紧急，可支配时间也没有那么多，更推荐中级软设开局。&lt;/p&gt;
&lt;p&gt;这个水平考试有些学校会要求学生毕业前考取，从难度而言其实很像期末考试甚至难度可能更低？不过从纸质改革为机考之后题库翻番不能说题目更刁钻但范围确实往着更细致方向考察，但对于此前都没接触过计算机学科理论部分的也可以考虑从这里入手。&lt;/p&gt;
&lt;p&gt;顺带一提也有很多职业人士来考，一般是一些特定类型企业的要求，还有涉及到城市落户加分之类，感兴趣的可以去深入查查。&lt;/p&gt;
&lt;p&gt;对我（们）而言，则是希望在最少的时间自学完“通识”部分，到达一个入门“及格线”，在这样基础上我们能稍微更清晰一点接下来自己更能接受哪个方向。&lt;/p&gt;
&lt;p&gt;需要在这里说明，从事后来看理论部分放的心力应当弱于前后端代码实操，并且理论部分有相当一部分章节与代码逻辑息息相关，刚开始看可能会很懵，但两者并不矛盾，有精力的可以代码写累了看理论，理论看累了写代码。&lt;/p&gt;
&lt;p&gt;软设有2张试卷，一张75道选择题，一张含6道选其中5道的固定题型的大题，总分75×2=150分，需每张试卷得到45分及以上才算为及格，若单科及格，成绩不保留。选择题和大题有很多衔接的地方，不建议把二者当成独立科目。&lt;/p&gt;
&lt;p&gt;整个的备考过程与一般应试考试无异，目的性也很强：（必须）围绕着真题考察范围去进行学习*→（可选）每看完一章及时做真题→（至少要尽量做）写整套真题→调整到一个相对比较whocar的心态，考完后忘记一切（）继续生活&lt;/p&gt;
&lt;p&gt;*注：过于沉迷系统性学习可能会掉进坑里？！很多时候很多知识之间就是“不”系统的，我们可以用一个稍微大一点的框架去框定它，但是太多太细的框架反而容易框住我们自己。&lt;/p&gt;
&lt;p&gt;因为软设给的时间其实较充裕，所以不太存在计时做题问题，你甚至可以在考场上安静地发呆一会调整一下心理状态。&lt;/p&gt;
&lt;p&gt;官方参考书都是不说人话的，因此看视频的比较多，对视频很难入脑的可以试试看用插件等导出对应视频的字幕看能不能直接看文字看懂然后配合题目。或者自行查找参考资料。&lt;/p&gt;
&lt;h4 id=&#34;332熊之参考资料&#34;&gt;3.3.2熊之参考资料
&lt;/h4&gt;&lt;p&gt;小编熊还是看了视频，大致参考的（比较遗憾的是绝大多数都是男讲师，欢迎推荐女讲师非第一性讲师）：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/opus/704090344185135144&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;2022年软件设计师学习路线（理论部分，男讲师，0男味而时常令我惊叹，并且有学生的谦虚感非常难得，讲的也很通俗易懂像是善良学霸喂饭式讲题，除了JAVA基础部分需要自己去补课，补课完后来听会知道这人讲得有多友好。应该是作为伊毕业作品集专门准备的账号，近两年已经没更新了。下述各部分路线参考得最多的也是这篇）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1Bg4y1b7Wx/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java从零基础到做项目（跟着搓代码，没时间的跟到讲完接口部分，东北女讲师赵珊珊，很喜欢她口音，会拿自己开玩笑感觉有点端水意味但不会不适，在bilibili有自己的账号）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV12J41137hu/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【狂神说Java】Java零基础学习视频通俗易懂（跟着搓代码，当年很火的一个男讲师，现在貌似转行不做教师改做金融了，这个男讲师还做了一整个java路线，其它的我还没听完，但JAVA基础这块真的不错把我很多懵懵懂懂的地方讲懂了）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一些我当时另外参考的，其中很多很多的网络博客零散视频追问GPT的部分在此没有记录：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV124411k7uV/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;半小时看懂&amp;lt;计算机网络&amp;gt;（男博主）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1Fv4y1f7T1/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;深入浅出数据结构【中英字幕】（国外男讲师）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://space.bilibili.com/271977769/video&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;从0到1速通java（男讲师，纯讲基础部分，那个时候还在连载中，前半部分到接口部分我觉得讲得算通俗易懂，后半部分我没看）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://space.bilibili.com/395188578&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;博主：爱上半导体（女博主，各种小科普）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://space.bilibili.com/495226768/channel/collectiondetail?sid=371333&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;物理视角通俗讲解编程（男博主，有点仿油管动画讲解那个意思）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1ZvXsY6Exx/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java23种设计模式全集【中英字幕】（男声，但洋人视频普遍说人话）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;书籍：《大话设计模式》（男作者，里面的“时代局限性”有点严重，注意，非常不建议在看不懂代码的时候去碰设计模式，设计模式是为代码服务的，看了再多通俗易懂描述但如果看不懂代码逻辑那么其实在绕远路）&lt;/p&gt;
&lt;h4 id=&#34;333熊之开始前的小贴士&#34;&gt;3.3.3熊之开始前的小贴士
&lt;/h4&gt;&lt;p&gt;在完全未知状态下，战线拖得越长心理防线越容易被击溃而且大脑机制就是会清除掉你不常用的知识，因此我们需要先估计出一个大概的时间。视频其实一定程度上可以倒推整个备考过程自己需要的时间——如果你选择了看书那么可能需要以x页或章/次来计算。因为一般讲师都会放慢速度，我习惯的倍速是1.5，听不懂的时候会切回到1，或者是找别的视频参考，但因为要考虑到吸收消化时间和做题时间（如果有的话）加总起来还是以视频总时长为参考最好，在这个基础之上认真估算自己每天、每周、每月能拿出来的时间，以小时计，不用精确到分钟。&lt;/p&gt;
&lt;p&gt;不要高估，只能坚持1个小时就不要算成2小时，需要三天打鱼晒网两天那就给自己晒网两天，不要因为整个流程看下来似乎小几百小时（约200小时？）就觉得自己能每天以超高效状态完成，人的每天状态都是不同的，稳稳走才能走的快。而且其中有很大一部分习题讲解我们是可以先skip掉的，听人说10遍不如自己做一遍，还有比较刁钻的部分可完全可以先跳过，后期看情况看能否理解，要接受有些很偏很细的零散知识它就是不入脑的，因为它只是以一个概念存在，从应试角度倒是可以考前一周死记硬背但是不要期待单纯的死记硬背的成效，尤其是改成机考后它考题范围更细更“刁钻”如果没有理解很可能稍微变换一点还是会很难反应过来。&lt;/p&gt;
&lt;p&gt;关于做笔记，一开始小编熊因为很久没有再去接触应试考试，从复健角度选择了纸质笔记，但后期来看，电子笔记是最方便的，因为增删改的成本很低，于是后来还是改成了电子笔记。&lt;/p&gt;
&lt;p&gt;还有一点温馨提示，很多重复性工作其实不必我们自己来做，以前常会有人说手抄一份笔记印象深刻，但印象深刻其实跟理解挂钩，你不理解的抄10遍也是短期记忆可能只适合最后考前2天强行记忆突击一下，而我们从一开始，倒不如把不必要的时间省下来多用复制粘贴。现在互联网时代，这种已经出现许多年的应试考试会有很多人愿意分享笔记，例如上文提到的小编熊跟的这个讲师，其专栏内也贴心的给出了热心网友给出的笔记，可供参考。还需要提醒一点不用想着把所有资料都下载下来，看不完的，找到一个顺眼的来抄即可，虽然我们是为了复制粘贴，但最终还是要形成我们自己独有的笔记，而非全能的资料库。&lt;/p&gt;
&lt;p&gt;此外，这个专栏还包括了考试指定书籍，其实可用电子书籍搭配电子笔记的办法，在后期回顾时能省很多时间。&lt;/p&gt;
&lt;p&gt;那么让我们进入到第一部分的学习中来吧！以下板块可以按自己需要进行微调，但板块内的顺序不太建议自行变动。尤其是对于和小编熊一样的萌新而言。&lt;/p&gt;
&lt;h4 id=&#34;334三大板块参考&#34;&gt;3.3.4三大板块参考
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;———板块一，急的可以先跳到板块二再回来这里———&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.计算机系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题型：【选择题】&lt;/li&gt;
&lt;li&gt;分值统计：约6分&lt;/li&gt;
&lt;li&gt;涉及到的知识点：硬件结构如CPU/IO控制方式/指令/总线/加密认证、计算机内数据的表示及运算也就是进制、为更方便负数运算而诞生的正反补移码、性能评测如校验码……&lt;/li&gt;
&lt;li&gt;印象：计算机整体如何运作，涉及到一点点的数学小知识但实际应用中感觉大家会直接用码农专用计算器吧。近两年偶尔考进制换算，其它理论部分相较以前的纸质卷要考察更细即往年没有考察过的部分，除听课之外配合着做题最好也稍微看点书，当然了，那不说人话的参考书估计也看不下去，最好是以已经考察的点往外做扩散。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.程序设计语言&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题型：【选择题】&lt;/li&gt;
&lt;li&gt;分值统计：6分&lt;/li&gt;
&lt;li&gt;涉及到的知识点：计算机语言间区别汇编类编译类解释类、编译器具体如何工作、遍历语法规则……&lt;/li&gt;
&lt;li&gt;印象：从抽象“计算机”深入到我们如何使用“计算机”，看似有一点代码但其实一点没有，看似一点没有但其实是围绕着我们不久之后将接触到的各类语言，更多的在说比较干的东西，在此之前就算简单用过不同语言码代码的会觉得很干很枯燥也很正常。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.数据流图&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题型：【主观题】大题一&lt;/li&gt;
&lt;li&gt;分值统计：固定15分&lt;/li&gt;
&lt;li&gt;涉及到的知识点：DFD，属于结构化开发方法里的内容。实体/加工/数据存储/数据流。&lt;/li&gt;
&lt;li&gt;印象：为什么要有这个东西，很简单，即“统一语言”，这个概念会一直延续到我们学习之外。类似于给定一个规则后让全球人都能看懂的流程可视化手册，在这个阶段我们不需要焦虑这种图怎么做出来，只需要关注给一个这样的图之后我们要怎么看。顺带一说这个流程不涉及任何代码实现部分。从应试角度这个题型有固定解题办法，我给了个名称叫连连看。一般情况出题人不为难在解答前2/3的题目时几乎不用动脑，但剩下1/3……不一定，看出题人品行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.知识产权&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题型：【选择题】&lt;/li&gt;
&lt;li&gt;分值统计：约2分&lt;/li&gt;
&lt;li&gt;涉及到的知识点：著作权细则内保护期限、商业秘密权、专利权、商标权、侵权判断……&lt;/li&gt;
&lt;li&gt;印象：在纸质考试时期基本上能考察的方式已经考察完了，并且这一部分基本上是作为送分题存在，但进入到机考时代有隐约考察更细的倾向。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5.数据库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题型：【选择题】&lt;/li&gt;
&lt;li&gt;分值统计：6分&lt;/li&gt;
&lt;li&gt;涉及到的知识点：数据库语言但理论、SQL（数据库）语法、范式判断、实体联系模型（E-R图）……&lt;/li&gt;
&lt;li&gt;印象：其实感觉更像逻辑题？！跟抄代码阶段说的数据库说有关系吧也有但是这个更多是代码之外的东西，一点点小小数学知识，一点点矩阵，没听过矩阵的花10分钟找个中英双语视频看下知道是个啥玩意懂两个矩阵相乘怎么算入门来说已经够够的了，因为考的更难的大家普遍也不会。而范式判断算个小难点？可以找点辅助视频，有个基本了解，近期考察“第X范式的目的是”这种题型比较多。顺带一提，其实按照打代码顺序一般其实是基础语法部分结束之后再接触数据库的……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;6.实体联系模型E-R图&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题型：【主观题】大题二&lt;/li&gt;
&lt;li&gt;分值统计：固定15分&lt;/li&gt;
&lt;li&gt;涉及到的知识点：实体联系、键……&lt;/li&gt;
&lt;li&gt;印象：本质同数据流图，人类太没用了所以亡羊补牢，然而一张网没法全补齐于是设计了很多张不同但本质大同小异的网，这很小小人类。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;———板块二———&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;7.1一门后端语言的基础知识&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从这里开始我们就需要来正式了解“代码”啦，因为这个讲师选的JAVA加上后面大题二选一是JAVA和C++，图方便于是我就用的JAVA，虽然语言间是基本相通的但每家有每家特色，最早期建议还是只选一个，不要学杂了……当然，近几年客观题都爱考python知识，都会涉及到一点，但最好以看科普拓展的心情看待，不然可能会有点伤感和焦虑……&lt;/li&gt;
&lt;li&gt;注意，每个语言的路线学习基本上都是基础语法+框架，我们在这个部分不需要学到框架，只需要看基础语法，从JAVASE来说我们只需要从认识JAVA到流程控制再到正式进入类与对象最后到接口，根据跟的讲师/教材不同可能里面会对一些内容进行补充删减顺序改变，因此比较建议选一个相性比较符合的讲师或教材，总之当你听到让你连接数据库环节的时候就可以暂停了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;7.2面向对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题型：【选择题】&lt;/li&gt;
&lt;li&gt;分值统计：约4分&lt;/li&gt;
&lt;li&gt;涉及到的知识点：类、对象、方法重载、封装、继承、多态、面向对象设计……&lt;/li&gt;
&lt;li&gt;印象：这部分分值隐约有下降趋势……可能出题人还是想精力更多的放在对应的大题四？等语言基础打好了再回来看应试的考点你会发现……至少能看懂在说什么了，一开始我一直在逃避看代码结果看到这里整个人就是懵的，类是什么？封装？？重载和重写？？？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;8.UML统一建模语言&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题型：【选择题】&lt;/li&gt;
&lt;li&gt;分值统计：约4分&lt;/li&gt;
&lt;li&gt;涉及到的知识点：UML10种类型图。&lt;/li&gt;
&lt;li&gt;印象：先前瞻解释一下什么是UML，UML(Unified Modeling Language)全名叫统一建模语言，又称为标准建模语言，是为面向对象软件设计提供统一的、标准的、可视化的建模语言。人话：人类亡羊补牢三度袭来。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;9.UML实操-多为用例图+类图，偶尔会出现别的图&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题型：【主观题】大题三&lt;/li&gt;
&lt;li&gt;分值统计：固定15分&lt;/li&gt;
&lt;li&gt;涉及到的知识点：UML10种类型图中优先聚焦用例图和类图的识图，其它类型图一般也不难（当然了不一定）最基础的要能看懂。&lt;/li&gt;
&lt;li&gt;印象：相较大题二，我会认为大题三更友好一点……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;10.设计模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题型：【选择题】&lt;/li&gt;
&lt;li&gt;分值统计：约4分&lt;/li&gt;
&lt;li&gt;涉及到的知识点：26种设计模式。&lt;/li&gt;
&lt;li&gt;印象：请注意，如果一直逃避代码，到这一部分大大大概率是会完全懵的，靠死记硬背那么将迎来非常地狱的时期，因为我们要面对26种模板以及各种变化的考题，如果不理解就会很头疼，但一旦理解了就会觉得：就这？所以如果之前的代码知识打好基础了，这一部分就不会那么折磨，惨痛的教训之小编熊因为没能悟到这一块想要理解其逻辑应该回到打代码本身因此卡了2个月，而设计模式人话版就是因为各种情况各种需求大差不差，并且更注重拓展性，于是就有人开始公式答题了，代公式就是快（等），然后人类搞出来了&lt;strong&gt;26种模板&lt;/strong&gt;，其实设计模式更多是工作几年之后才能理解到其中好处的东西，但远的我们不提，应试需求我们只需要浅浅认识它不需要生产它。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;11.设计模式实操&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题型：【主观题】大题五/六&lt;/li&gt;
&lt;li&gt;分值统计：固定15分&lt;/li&gt;
&lt;li&gt;涉及到的知识点：代码基础，尤其是抽象类、接口。&lt;/li&gt;
&lt;li&gt;印象：近两年的代码题还不是很变态，但是要细心。网上也有所谓的答题技巧，但实际上还是要学会看一段代码内部的、和另一段代码之间的联系，而且真题中会给出类图方便理解，理解了基本上不会很难，并且你会形成自己的一套“答题技巧”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;12.操作系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题型：【选择题】&lt;/li&gt;
&lt;li&gt;分值统计：约6分&lt;/li&gt;
&lt;li&gt;涉及到的知识点：PV操作、进程、存储管理、文件/磁盘/特殊结构……&lt;/li&gt;
&lt;li&gt;印象：其中有些“送分题”但改成机考后不再以固定分值出现，比较看命。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;13.结构化开发&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题型：【选择题】&lt;/li&gt;
&lt;li&gt;分值统计：约4分&lt;/li&gt;
&lt;li&gt;涉及到的知识点：内聚、耦合、系统开发……&lt;/li&gt;
&lt;li&gt;印象：说明软件开发过程中一些原则，内聚啊耦合的，其实理解上没有那么大难度，主要是翻译不说人话！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;14.软件工程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题型：【选择题】&lt;/li&gt;
&lt;li&gt;分值统计：约10分&lt;/li&gt;
&lt;li&gt;涉及到的知识点：软件开发过程各种模型方法、测试、项目/质量管理……&lt;/li&gt;
&lt;li&gt;印象：这一块耗时会比较长，但相应的回报也不会很差，大部分都是可以理解的内容比较能给人信心。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;15.信息安全&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题型：【选择题】&lt;/li&gt;
&lt;li&gt;分值统计：约5分&lt;/li&gt;
&lt;li&gt;涉及到的知识点：防火墙、病毒、网络攻击、网络安全……&lt;/li&gt;
&lt;li&gt;印象：如果是经常用电脑上网的友友应该会更有“亲切感”，主要核心内容即人类在线下斗，在线上也要斗……不过近两年这一部分的题目很与时俱进，出题人给人的感觉就像病毒更新迭代一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;16.计算机网络&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题型：【选择题】&lt;/li&gt;
&lt;li&gt;分值统计：约5分&lt;/li&gt;
&lt;li&gt;涉及到的知识点：计算机网络（含OSI模型）、协议簇、命令、Linux命令……&lt;/li&gt;
&lt;li&gt;印象：协议的部分在我看来很抽象……其中涉及到很多英文简写，建议通过查找到全称来链接记忆。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;———板块三———&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;17.数据结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题型：【选择题】&lt;/li&gt;
&lt;li&gt;分值统计：约5分&lt;/li&gt;
&lt;li&gt;涉及到的知识点：时间复杂度、空间复杂度、链表、矩阵、栈、队列、树、图、排序……&lt;/li&gt;
&lt;li&gt;印象：从这里开始便聚焦于数学题，和代码关系不大主要是数学概念……建议油管上找到印度姐印度哥讲师配合着看。其它的不敢说，但二叉树真的不难并且很多原理可以自行推导，如果其它的无能为力，也不要放弃二叉树。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;18.算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题型：【选择题】&lt;/li&gt;
&lt;li&gt;分值统计：约5分&lt;/li&gt;
&lt;li&gt;涉及到的知识点：常用算法原理分治法回溯法动态规划法贪心法……&lt;/li&gt;
&lt;li&gt;印象：看算法的过程中小编熊基本处于一种大脑放弃思考的状态，但是基础知识看得懂的就记住，原理不难？！&lt;strong&gt;本质就是人类想省钱省时间&lt;/strong&gt;，人类真爱折腾啊……算法部分在客观题主观题都有，同理，建议油管上找到印度姐印度哥讲师配合着看，你永远可以相信印度人。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;19.算法实操&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题型：【主观题】大题四&lt;/li&gt;
&lt;li&gt;分值统计：固定15分&lt;/li&gt;
&lt;li&gt;涉及到的知识点：各类算法并且以代码形式实现外加手动计算。&lt;/li&gt;
&lt;li&gt;印象：全程都在尖叫：这什么啊。并且这部分难度忽高忽低，有时候还能瞎猫碰上死耗子靠着别的地方的知识来抢个几分，有时候就只能听天由命，这也是为什么把算法部分放在最后一个板块的最后一个部分，建议没有时间的前提下，看完基础囫囵吞枣一下把重心还是放在剩下的60分，这15分我们尽量不要全丢，但尽量保持一个“能拿一分就是多赚到一分”的淡泊名利态度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;334熊之应对&#34;&gt;3.3.4熊之应对
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;1.做题环节
&lt;ul&gt;
&lt;li&gt;跟着视频，很可能除了大题外所有选择题你已经跟着视频过了一遍，如果你和小编熊同样是选择了这个男讲师，其实此时可以快速刷第二遍，因为小几百个小时下来你很有可能已经忘光，或者不是第一次考的友友也可以参考这种做法快速刷一遍往年真题，即看题目自己得出答案跳到最后看答案，无误直接下一道有问题则重新听一遍讲解还是有问题的通过搜索引擎等方式去查找看具体是因为什么卡住。&lt;/li&gt;
&lt;li&gt;这样的好处是我们不用再去找真题解析并且处于一个相对适应的环境，当然，如果你对视频过敏的，以上“视频”字眼也可以换成文字，现在刷题软件上文字解析也是说的很详细的。&lt;/li&gt;
&lt;li&gt;这些小题刷完了相当于又过了一遍早年真题和常考题型，接下来到真题阶段，关于熊做真题的逻辑，首先，可以考虑打印出纸质版，打印近8-10年的足矣，因为每天看手机的时间很长可以切换一下心情，当然，能适应的也可以用电子版。根据你参加考试的批次留出上一批次的试题，例如参加的是2024年下半年的考试，可以留出2024年上半年的试题放在中后期写，接下来从2023年下半年倒着往前写，这样就算时间不够也能确保你先把最重要的事情做了；选择题和客观题穿插着写，选择题可以一套一套做因为你理论上已经把知识点全过了一遍，没有可以蒙的主观题按【模块】练，而且优先练习不熟悉的部分。&lt;/li&gt;
&lt;li&gt;每次做完题后你可能有一些新笔记，建议尽量补充到原笔记上，这样不用跳转来跳转去，如果涉及到图像题也可以摘抄一道有代表性的更新至笔记。这也是推荐电子笔记的原因，修改成本低，新增也能大量通过截图粘贴解决。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2.经验教训
&lt;ul&gt;
&lt;li&gt;一定要跟着动手，无论是理论考试的应试还是抄代码，只用眼睛看你是真的不知道大脑多能欺骗你的。&lt;/li&gt;
&lt;li&gt;不要想着一个视频一次搜索就能解决我们的小问号，在各种抽象概念的接连袭来下问号很多是很正常的，我有时候较真可能一个晚上就在为一个问题死磕。多用搜索引擎多用外网，不抗拒AI的多去折磨GPT和ds，AI作为数据库太好用了，而且你问题再多再小白它也不会骂你，当然它可能“骗”你所以得到解答之后我们要去验证。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3.最后才说应试
&lt;ul&gt;
&lt;li&gt;软考有个不成文“规则”，即客观题难那么主观题不会太过分，主观题离谱那么客观题应该比较顺手，因此如果开局连续几道题都脑子空白的想尖叫的，先别慌，告诉自己整体难度肯定会控制的，自己应该是遇到了这部分恰好用来提升难度的部分，但总有我们能拿分的地方，我们的目标就是45分，把能拿到的分数都先拿到再说。&lt;/li&gt;
&lt;li&gt;我的习惯之客观题，点开试题，把所有题都扫一遍，扫到我一眼就会的题目就停下来做完然后继续扫，扫完第一遍从头开始扫第二遍，这个时候你的心态一般会好很多因为你大概知道你这个时候保底已拿下多少分，心里有底就不会那么慌，而且你心态一好脑子里的小知识点就逐渐浮现了，接下来看两眼能看出来的耐着性子来做看了三眼还是看不懂的继续跳过，扫第二遍结束这个时候有不太确定和大概确定的，都可以标记一下，第三遍来攻克真的一点都不会的，但这个时候你应该已经进入状态，运气好的你可能会突然想起来：哎这个好像是XX？总之不确定的还是标记起来，最后第四遍把所有标记的题目认真再看一遍，看似过了很多遍其实2小时完全够用基本上都会提前交卷进入到主观题，是的这两部分现在是连考所以剩余时间时间会延续到下一科。&lt;/li&gt;
&lt;li&gt;我的习惯之主观题，这部分因人而异，我会先直冲大题六JAVA代码，但不是说我得心应手而是我紧张我怕我一慌什么接口继承方法调用构造全忘了所以在不断自我提醒之下会先去看代码，一般都能做出来至少两道除非出题人真的很坏，运气不错能全顺出来，就可以顺理成章来到……我其实会扫一眼试题四算法，因为算法这道大题很大一部分分值也是代码实现，趁着手感还在有时候可以蹭一下，而且第一眼其实你就能看出来试题四你会不会，50%概率不会那就跳到试题一二三中你做着更顺手的最后再来啃硬骨头，但不是还有50%概率可以蹭一下吗对不对，总之算法这里稍稍留意一下后试题一二三我的习惯是先全部点一遍，看有没有考察纯背的知识点的作答，例如“XX情况用什么设计模式更好为什么”“用例之间存在什么关系”等等，有这种题的趁着记忆还在赶紧写掉，接着才是回到题目本身。&lt;/li&gt;
&lt;li&gt;考场上可能会遇到很多莫名其妙的情况，像是一紧张键盘鼠标突然失灵——咱们这地方的条件大家也知道电脑比我还紧张哈——遇到意外情况举手示意，而更要命的，是前两年出现过大规模作弊曝光的情况，应该也间接导致监考员比考生还紧张，现在无纸化机考进考场只允许携带准考证和身份证（具体的按照当地考场实际情况有些考场又允许自己带笔但草稿纸一般是不准的），但在你做题期间监考员非常可能满屋子一直走或者就是莫名其妙站在你身边看着你做题还靠的很近像是你们在搞暧昧关系然后又突然发出不明声音或者翻翻你的草稿纸翻翻你的准考证然后跟你说一句“这里补上信息”“写了字不能带走”之类的，我们最好的心态就是保持：别怕。只要对方没有明说判你作弊说明对方就不会对你怎么样，只是说这种情况发生可能出于监考角度它必须要提醒，我们只需要嗯嗯然后继续保持节奏做题，出了考场大家都是陌生人，whocar，极大概率这辈子都不会再见的人。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
